// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id         String     @id @default(uuid())
  name       String
  image     String?
  first_name String?
  last_name String?
  email         String          @unique
  emailVerified DateTime?
  password   String?
  role       Role       @default(CUSTOMER)
  properties Property[]
  accounts      Account[]
  sessions      Session[]

  Authenticator Authenticator[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum Role {
  AGENT
  CUSTOMER
  ADMIN
}

model Property {
  id           String       @id @default(uuid())
  name         String
  location     String
  description String
  price        Int
  images       String[] // Storing as array of URLs
  bedrooms     Int
  bathrooms    Int
  area         Int
  purpose      Purpose
  paidType     PaidType
  propertyType PropertyType
  ownerType    OwnerType
  owner        User        @relation(fields: [ownerId], references: [id])
  ownerId      String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum Purpose {
  RENT
  BUY
}

enum PaidType {
  YEARLY
  MONTHLY
  WEEKLY
  DAILY
}

enum PropertyType {
  APARTMENT
  HOUSE
  VILLA
  COMMERCIAL
}

enum OwnerType {
  AGENT
  CUSTOMER
  ADMIN
}


model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}


model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}